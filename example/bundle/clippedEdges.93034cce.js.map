{"mappings":"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","sources":["node_modules/stats.js/build/stats.min.js","example/clippedEdges.js"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// import * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport Stats from 'stats.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { MeshBVH, MeshBVHVisualizer, CONTAINED } from '..';\n\nconst params = {\n\tuseBVH: true,\n\n\thelperDisplay: false,\n\thelperDepth: 10,\n\n\twireframeDisplay: false,\n\tdisplayModel: true,\n\n\tanimate: true,\n\tanimation: 'SPIN',\n\tinvert: false,\n};\n\nlet renderer, camera, scene, gui, stats;\nlet controls, clock;\nlet colliderBvh, colliderMesh, bvhHelper;\nlet frontSideModel, backSideModel, planeMesh;\nlet clippingPlanes, outlineLines;\nlet initialClip = false;\nlet outputElement = null;\nlet time = 0;\n\nconst tempVector = new THREE.Vector3();\nconst tempVector1 = new THREE.Vector3();\nconst tempVector2 = new THREE.Vector3();\nconst tempVector3 = new THREE.Vector3();\nconst tempLine = new THREE.Line3();\nconst inverseMatrix = new THREE.Matrix4();\nconst localPlane = new THREE.Plane();\n\ninit();\nrender();\n\nfunction init() {\n\n\toutputElement = document.getElementById( 'output' );\n\n\tconst bgColor = new THREE.Color( 0x263238 ).multiplyScalar( 0.1 );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\trenderer.localClippingEnabled = true;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( bgColor, 20, 70 );\n\n\t// lights\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.8 );\n\tlight.position.set( 1, 1.5, 2 ).multiplyScalar( 50 );\n\tscene.add( light );\n\tscene.add( new THREE.HemisphereLight( 0xffffff, 0x223344, 0.5 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.01, 50 );\n\tcamera.position.set( 0.4, 0.4, 0.4 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\tclock = new THREE.Clock();\n\n\t// clippingPlanes\n\tclippingPlanes = [\n\t\tnew THREE.Plane(),\n\t];\n\n\tplaneMesh = new THREE.Mesh( new THREE.PlaneBufferGeometry(), new THREE.MeshBasicMaterial( {\n\t\tside: THREE.DoubleSide,\n\t\tstencilWrite: true,\n\t\tstencilFunc: THREE.NotEqualStencilFunc,\n\t\tstencilFail: THREE.ZeroStencilOp,\n\t\tstencilZFail: THREE.ZeroStencilOp,\n\t\tstencilZPass: THREE.ZeroStencilOp,\n\t} ) );\n\tplaneMesh.scale.setScalar( 1.5 );\n\tplaneMesh.material.color.set( 0x80deea ).convertLinearToSRGB();\n\tplaneMesh.renderOrder = 2;\n\tscene.add( planeMesh );\n\n\t// create line geometry with enough data to hold 100000 segments\n\tconst lineGeometry = new THREE.BufferGeometry();\n\tconst linePosAttr = new THREE.BufferAttribute( new Float32Array( 300000 ), 3, false );\n\tlinePosAttr.setUsage( THREE.DynamicDrawUsage );\n\tlineGeometry.setAttribute( 'position', linePosAttr );\n\toutlineLines = new THREE.LineSegments( lineGeometry, new THREE.LineBasicMaterial() );\n\toutlineLines.material.color.set( 0x00acc1 ).convertSRGBToLinear();\n\toutlineLines.frustumCulled = false;\n\toutlineLines.renderOrder = 3;\n\n\t// load the model\n\tconst loader = new GLTFLoader();\n\tloader.setMeshoptDecoder( MeshoptDecoder );\n\tloader.load( '../models/internal_combustion_engine/model.gltf', gltf => {\n\n\t\t// merge the geometry if needed\n\t\t// let model = gltf.scene;\n\t\t// model.updateMatrixWorld( true );\n\n\t\t// create a merged version if it isn't already\n\t\t// const geometries = [];\n\t\t// model.traverse( c => {\n\n\t\t// \tif ( c.isMesh ) {\n\n\t\t// \t\tconst clonedGeometry = c.geometry.clone();\n\t\t// \t\tclonedGeometry.applyMatrix4( c.matrixWorld );\n\t\t// \t\tfor ( const key in clonedGeometry.attributes ) {\n\n\t\t// \t\t\tif ( key === 'position' || key === 'normal' ) {\n\n\t\t// \t\t\t\tcontinue;\n\n\t\t// \t\t\t}\n\n\t\t// \t\t\tclonedGeometry.deleteAttribute( key );\n\n\t\t// \t\t}\n\n\t\t// \t\tgeometries.push( clonedGeometry );\n\n\t\t// \t}\n\n\t\t// } );\n\n\t\t// const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries( geometries );\n\t\t// model = new THREE.Mesh( mergedGeometry, new THREE.MeshStandardMaterial() );\n\n\t\t// Render Order\n\t\t// 0. Render front model and back model with stencil\n\t\t// 1. Render surface color model\n\t\t// 2. Render clip pane cap\n\t\t// 3. Render outlines\n\n\t\t// use basic material because the using clip caps is expensive since the fragment\n\t\t// shader has to run always.\n\t\tconst model = gltf.scene.children[ 0 ];\n\t\tconst mergedGeometry = model.geometry;\n\t\tmodel.material = new THREE.MeshBasicMaterial();\n\t\tmodel.position.set( 0, 0, 0 );\n\t\tmodel.quaternion.identity();\n\n\t\t// color the surface of the geometry with an EQUAL depth to limit the amount of\n\t\t// fragment shading that has to run.\n\t\tconst surfaceModel = model.clone();\n\t\tsurfaceModel.material = new THREE.MeshStandardMaterial( {\n\t\t\tdepthFunc: THREE.EqualDepth,\n\t\t} );\n\t\tsurfaceModel.renderOrder = 1;\n\n\t\toutlineLines.scale.copy( model.scale );\n\t\toutlineLines.position.set( 0, 0, 0 );\n\t\toutlineLines.quaternion.identity();\n\n\t\tmodel.updateMatrixWorld( true );\n\n\t\t// Adjust all the materials to draw front and back side with stencil for clip cap\n\t\tconst matSet = new Set();\n\t\tconst materialMap = new Map();\n\t\tfrontSideModel = model;\n\t\tfrontSideModel.updateMatrixWorld( true );\n\t\tfrontSideModel.traverse( c => {\n\n\t\t\tif ( c.isMesh ) {\n\n\t\t\t\tif ( materialMap.has( c.material ) ) {\n\n\t\t\t\t\tc.material = materialMap.get( c.material );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tmatSet.add( c.material );\n\n\t\t\t\tconst material = c.material.clone();\n\t\t\t\tmaterial.color.set( 0xffffff );\n\t\t\t\tmaterial.roughness = 1.0;\n\t\t\t\tmaterial.metalness = 0.0;\n\t\t\t\tmaterial.side = THREE.FrontSide;\n\t\t\t\tmaterial.stencilWrite = true;\n\t\t\t\tmaterial.stencilFail = THREE.IncrementWrapStencilOp;\n\t\t\t\tmaterial.stencilZFail = THREE.IncrementWrapStencilOp;\n\t\t\t\tmaterial.stencilZPass = THREE.IncrementWrapStencilOp;\n\t\t\t\tmaterial.clippingPlanes = clippingPlanes;\n\n\t\t\t\tmaterialMap.set( c.material, material );\n\t\t\t\tc.material = material;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tmaterialMap.clear();\n\n\t\tbackSideModel = frontSideModel.clone();\n\t\tbackSideModel.traverse( c => {\n\n\t\t\tif ( c.isMesh ) {\n\n\t\t\t\tif ( materialMap.has( c.material ) ) {\n\n\t\t\t\t\tc.material = materialMap.get( c.material );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst material = c.material.clone();\n\t\t\t\tmaterial.color.set( 0xffffff );\n\t\t\t\tmaterial.roughness = 1.0;\n\t\t\t\tmaterial.metalness = 0.0;\n\t\t\t\tmaterial.colorWrite = false;\n\t\t\t\tmaterial.depthWrite = false;\n\t\t\t\tmaterial.side = THREE.BackSide;\n\t\t\t\tmaterial.stencilWrite = true;\n\t\t\t\tmaterial.stencilFail = THREE.DecrementWrapStencilOp;\n\t\t\t\tmaterial.stencilZFail = THREE.DecrementWrapStencilOp;\n\t\t\t\tmaterial.stencilZPass = THREE.DecrementWrapStencilOp;\n\t\t\t\tmaterial.clippingPlanes = clippingPlanes;\n\n\t\t\t\tmaterialMap.set( c.material, material );\n\t\t\t\tc.material = material;\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// create the collider and preview mesh\n\t\tcolliderBvh = new MeshBVH( mergedGeometry, { maxLeafTris: 3 } );\n\t\tmergedGeometry.boundsTree = colliderBvh;\n\n\t\tcolliderMesh = new THREE.Mesh( mergedGeometry, new THREE.MeshBasicMaterial( {\n\t\t\twireframe: true,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.01,\n\t\t\tdepthWrite: false,\n\t\t} ) );\n\t\tcolliderMesh.renderOrder = 2;\n\t\tcolliderMesh.position.copy( model.position );\n\t\tcolliderMesh.rotation.copy( model.rotation );\n\t\tcolliderMesh.scale.copy( model.scale );\n\n\t\tbvhHelper = new MeshBVHVisualizer( colliderMesh, parseInt( params.helperDepth ) );\n\t\tbvhHelper.depth = parseInt( params.helperDepth );\n\t\tbvhHelper.update();\n\n\t\t// create group of meshes and offset it so they're centered\n\t\tconst group = new THREE.Group();\n\t\tgroup.add( frontSideModel, backSideModel, surfaceModel, colliderMesh, bvhHelper, outlineLines );\n\n\t\tconst box = new THREE.Box3();\n\t\tbox.setFromObject( frontSideModel );\n\t\tbox.getCenter( group.position ).multiplyScalar( - 1 );\n\t\tgroup.updateMatrixWorld( true );\n\t\tscene.add( group );\n\n\t} );\n\n\t// dat.gui\n\tgui = new GUI();\n\n\tgui.add( params, 'invert' );\n\tgui.add( params, 'animate' );\n\tgui.add( params, 'animation', [ 'SPIN', 'OSCILLATE' ] ).onChange( () => {\n\n\t\ttime = 0;\n\n\t} );\n\tgui.add( params, 'displayModel' );\n\tgui.add( params, 'useBVH' );\n\n\tconst helperFolder = gui.addFolder( 'helper' );\n\thelperFolder.add( params, 'wireframeDisplay' );\n\thelperFolder.add( params, 'helperDisplay' );\n\thelperFolder.add( params, 'helperDepth', 1, 20, 1 ).onChange( v => {\n\n\t\tif ( bvhHelper ) {\n\n\t\t\tbvhHelper.depth = parseInt( v );\n\t\t\tbvhHelper.update();\n\n\t\t}\n\n\t} );\n\thelperFolder.open();\n\n\tgui.open();\n\n\t// stats\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.domElement );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\n\t}, false );\n\n}\n\nfunction render() {\n\n\tif ( bvhHelper ) {\n\n\t\tbvhHelper.visible = params.helperDisplay;\n\t\tcolliderMesh.visible = params.wireframeDisplay;\n\n\t\tfrontSideModel.visible = params.displayModel;\n\t\tbackSideModel.visible = params.displayModel;\n\n\t}\n\n\t// make the outlines darker if the model is shown\n\toutlineLines.material.color\n\t\t.set( params.displayModel ? 0x00acc1 : 0x4dd0e1 )\n\t\t.convertSRGBToLinear();\n\n\tconst delta = Math.min( clock.getDelta(), 0.03 );\n\tif ( params.animate ) {\n\n\t\ttime += delta;\n\n\t\tif ( params.animation === 'SPIN' ) {\n\n\t\t\tplaneMesh.rotation.x = 0.25 * time;\n\t\t\tplaneMesh.rotation.y = 0.25 * time;\n\t\t\tplaneMesh.rotation.z = 0.25 * time;\n\t\t\tplaneMesh.position.set( 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\tplaneMesh.position.set( Math.sin( 0.25 * time ) * 0.325, 0, 0 );\n\t\t\tplaneMesh.rotation.set( 0, Math.PI / 2, 0 );\n\n\t\t}\n\n\t\tplaneMesh.updateMatrixWorld();\n\n\t}\n\n\tconst clippingPlane = clippingPlanes[ 0 ];\n\tclippingPlane.normal.set( 0, 0, params.invert ? 1 : - 1 );\n\tclippingPlane.constant = 0;\n\tclippingPlane.applyMatrix4( planeMesh.matrixWorld );\n\n\t// Perform the clipping\n\tif ( colliderBvh && ( params.animate || ! initialClip ) ) {\n\n\t\tinitialClip = true;\n\n\t\t// get the clipping plane in the local space of the BVH\n\t\tinverseMatrix.copy( colliderMesh.matrixWorld ).invert();\n\t\tlocalPlane.copy( clippingPlane ).applyMatrix4( inverseMatrix );\n\n\t\tlet index = 0;\n\t\tconst posAttr = outlineLines.geometry.attributes.position;\n\t\tconst startTime = window.performance.now();\n\t\tcolliderBvh.shapecast( {\n\n\t\t\tintersectsBounds: box => {\n\n\t\t\t\t// if we're not using the BVH then skip straight to iterating over all triangles\n\t\t\t\tif ( ! params.useBVH ) {\n\n\t\t\t\t\treturn CONTAINED;\n\n\t\t\t\t}\n\n\t\t\t\treturn localPlane.intersectsBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t// check each triangle edge to see if it intersects with the plane. If so then\n\t\t\t\t// add it to the list of segments.\n\t\t\t\tlet count = 0;\n\n\t\t\t\ttempLine.start.copy( tri.a );\n\t\t\t\ttempLine.end.copy( tri.b );\n\t\t\t\tif ( localPlane.intersectLine( tempLine, tempVector ) ) {\n\n\t\t\t\t\tposAttr.setXYZ( index, tempVector.x, tempVector.y, tempVector.z );\n\t\t\t\t\tindex ++;\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t\ttempLine.start.copy( tri.b );\n\t\t\t\ttempLine.end.copy( tri.c );\n\t\t\t\tif ( localPlane.intersectLine( tempLine, tempVector ) ) {\n\n\t\t\t\t\tposAttr.setXYZ( index, tempVector.x, tempVector.y, tempVector.z );\n\t\t\t\t\tcount ++;\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\ttempLine.start.copy( tri.c );\n\t\t\t\ttempLine.end.copy( tri.a );\n\t\t\t\tif ( localPlane.intersectLine( tempLine, tempVector ) ) {\n\n\t\t\t\t\tposAttr.setXYZ( index, tempVector.x, tempVector.y, tempVector.z );\n\t\t\t\t\tcount ++;\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\t// When the plane passes through a vertex and one of the edges of the triangle, there will be three intersections, two of which must be repeated\n\t\t\t\tif ( count === 3 ) {\n\n\t\t\t\t\ttempVector1.fromBufferAttribute( posAttr, index - 3 );\n\t\t\t\t\ttempVector2.fromBufferAttribute( posAttr, index - 2 );\n\t\t\t\t\ttempVector3.fromBufferAttribute( posAttr, index - 1 );\n\t\t\t\t\t// If the last point is a duplicate intersection\n\t\t\t\t\tif ( tempVector3.equals( tempVector1 ) || tempVector3.equals( tempVector2 ) ) {\n\n\t\t\t\t\t\tcount --;\n\t\t\t\t\t\tindex --;\n\n\t\t\t\t\t} else if ( tempVector1.equals( tempVector2 ) ) {\n\n\t\t\t\t\t\t// If the last point is not a duplicate intersection\n\t\t\t\t\t\t// Set the penultimate point as a distinct point and delete the last point\n\t\t\t\t\t\tposAttr.setXYZ( index - 2, tempVector3 );\n\t\t\t\t\t\tcount --;\n\t\t\t\t\t\tindex --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If we only intersected with one or three sides then just remove it. This could be handled\n\t\t\t\t// more gracefully.\n\t\t\t\tif ( count !== 2 ) {\n\n\t\t\t\t\tindex -= count;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t} );\n\n\t\t// set the draw range to only the new segments and offset the lines so they don't intersect with the geometry\n\t\toutlineLines.geometry.setDrawRange( 0, index );\n\t\toutlineLines.position.copy( clippingPlane.normal ).multiplyScalar( - 0.00001 );\n\t\tposAttr.needsUpdate = true;\n\n\t\tconst delta = window.performance.now() - startTime;\n\t\toutputElement.innerText = `${ parseFloat( delta.toFixed( 3 ) ) }ms`;\n\n\t}\n\n\tstats.update();\n\trequestAnimationFrame( render );\n\n\tcontrols.update();\n\n\trenderer.render( scene, camera );\n\n}\n\n"],"names":["f","e","$8d6448069697305c$exports","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","define","amd","Stats","$ab9a3f5bbc0893bb$var$params","useBVH","helperDisplay","helperDepth","wireframeDisplay","displayModel","animate","animation","invert","$ab9a3f5bbc0893bb$var$renderer","$ab9a3f5bbc0893bb$var$camera","$ab9a3f5bbc0893bb$var$scene","$ab9a3f5bbc0893bb$var$gui","$ab9a3f5bbc0893bb$var$stats","$ab9a3f5bbc0893bb$var$controls","$ab9a3f5bbc0893bb$var$clock","$ab9a3f5bbc0893bb$var$colliderBvh","$ab9a3f5bbc0893bb$var$colliderMesh","$ab9a3f5bbc0893bb$var$bvhHelper","$ab9a3f5bbc0893bb$var$frontSideModel","$ab9a3f5bbc0893bb$var$backSideModel","$ab9a3f5bbc0893bb$var$planeMesh","$ab9a3f5bbc0893bb$var$clippingPlanes","$ab9a3f5bbc0893bb$var$outlineLines","$ab9a3f5bbc0893bb$var$initialClip","$ab9a3f5bbc0893bb$var$outputElement","$ab9a3f5bbc0893bb$var$time","$ab9a3f5bbc0893bb$var$tempVector","$ilwiq","Vector3","$ab9a3f5bbc0893bb$var$tempVector1","$ab9a3f5bbc0893bb$var$tempVector2","$ab9a3f5bbc0893bb$var$tempVector3","$ab9a3f5bbc0893bb$var$tempLine","Line3","$ab9a3f5bbc0893bb$var$inverseMatrix","Matrix4","$ab9a3f5bbc0893bb$var$localPlane","Plane","getElementById","bgColor","Color","multiplyScalar","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","localClippingEnabled","body","Scene","fog","Fog","light","DirectionalLight","position","set","add","HemisphereLight","PerspectiveCamera","far","updateProjectionMatrix","$5Rd1x","OrbitControls","Clock","Mesh","PlaneBufferGeometry","MeshBasicMaterial","side","DoubleSide","stencilWrite","stencilFunc","NotEqualStencilFunc","stencilFail","ZeroStencilOp","stencilZFail","stencilZPass","scale","setScalar","material","color","convertLinearToSRGB","renderOrder","lineGeometry","BufferGeometry","linePosAttr","BufferAttribute","Float32Array","setUsage","DynamicDrawUsage","setAttribute","LineSegments","LineBasicMaterial","convertSRGBToLinear","frustumCulled","loader","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","load","gltf","model","scene","mergedGeometry","geometry","quaternion","identity","surfaceModel","clone","MeshStandardMaterial","depthFunc","EqualDepth","copy","updateMatrixWorld","matSet","Set","materialMap","Map","traverse","isMesh","has","get","roughness","metalness","FrontSide","IncrementWrapStencilOp","clippingPlanes","clear","colorWrite","depthWrite","BackSide","DecrementWrapStencilOp","$4CEV9","MeshBVH","maxLeafTris","boundsTree","wireframe","transparent","opacity","rotation","MeshBVHVisualizer","parseInt","depth","group","Group","box","Box3","setFromObject","getCenter","$jiuw3","GUI","onChange","helperFolder","addFolder","open","$parcel$interopDefault","aspect","$ab9a3f5bbc0893bb$var$init","$ab9a3f5bbc0893bb$var$render","visible","delta","getDelta","x","y","z","sin","PI","clippingPlane","normal","constant","applyMatrix4","matrixWorld","index","posAttr","attributes","startTime","shapecast","intersectsBounds","intersectsBox","CONTAINED","intersectsTriangle","tri","count","start","intersectLine","setXYZ","fromBufferAttribute","equals","setDrawRange","needsUpdate","innerText","parseFloat","toFixed","requestAnimationFrame","render"],"version":3,"file":"clippedEdges.93034cce.js.map"}