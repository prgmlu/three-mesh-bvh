{"mappings":"+iBAYMA,UAAmBC,EAAAC,kB,YAEXC,GAEZC,MAAOD,GAEPE,KAAKC,KAAOL,EAAAM,aAEb,CAIAC,MAAOC,GAEN,MAUCC,EAAa,SAAWC,EAAiBC,GAExC,OAASD,GAER,KARgB,EAQME,QAAQC,MAAO,iCAAoCF,GAAO,KAC/E,MACD,KATiB,EASMC,QAAQC,MAAO,kCAAqCF,GAAO,KACjF,MACD,KAVkB,EAUMC,QAAQC,MAAO,sCAAyCF,GAAO,KACtF,M,QAEuBC,QAAQC,MAAO,6BAAgCF,GAAO,KAI/E,OAtBqB,CAwBtB,EAiBAG,EAAQ,SAAWN,EAAQO,EAAWC,GAIrCD,EAAcA,GAAY,KAC1B,IAAIE,EAAIT,EAAOU,IACdC,GAAI,EAAKC,EAAM,EAAGC,EAAI,GACtBC,EAAQC,OAAOC,aAAaC,MAAO,KAAM,IAAIC,YAAalB,EAAOmB,SAAUV,EAAGA,EAL7D,O,KAOR,GAAME,EAAIG,EAAMM,QAXjB,QAW6CR,EAAML,GAAiBE,EAAIT,EAAOqB,YAEvFR,GAAKC,EAAOF,GAAOE,EAAMQ,OACzBb,GAViB,IAWjBK,GAASC,OAAOC,aAAaC,MAAO,KAAM,IAAIC,YAAalB,EAAOmB,SAAUV,EAAGA,EAX9D,OAelB,OAAK,EAAME,KAQL,IAAUH,IAAUR,EAAOU,KAAOE,EAAMD,EAAI,GAC1CE,EAAIC,EAAMS,MAAO,EAAGZ,GAM7B,EAyOKa,EAAqB,SAAWC,EAAaC,EAAcC,EAAWC,GAE3E,MAAMC,EAAIJ,EAAaC,EAAe,GAChCI,EAAQC,KAAKC,IAAK,EAAKH,EAAI,KAAU,IAE3CF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAM,CAE/B,EAEMK,EAAoB,SAAWR,EAAaC,EAAcC,EAAWC,GAE1E,MAAMC,EAAIJ,EAAaC,EAAe,GAChCI,EAAQC,KAAKC,IAAK,EAAKH,EAAI,KAAU,IAG3CF,EAAWC,EAAa,GAAMpC,EAAA0C,UAAUC,YAAaJ,KAAKK,IAAKX,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMpC,EAAA0C,UAAUC,YAAaJ,KAAKK,IAAKX,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMpC,EAAA0C,UAAUC,YAAaJ,KAAKK,IAAKX,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMpC,EAAA0C,UAAUC,YAAa,EAEtD,EAEME,EAAY,IAAIC,WAAYtC,GAClCqC,EAAU3B,IAAM,EAChB,MAAM6B,EAjQa,SAAWvC,GAI5B,MACCwC,EAAQ,oCACRC,EAAW,uCACXC,EAAS,uBACTC,EAAa,oCAGbC,EAAS,CAERC,MAAO,EAEPC,OAAQ,GAERC,SAAU,GAEVC,YAAa,OAEbC,OAAQ,GAERC,MAAO,EAEPC,SAAU,EAEVC,MAAO,EAAGC,OAAQ,GAIpB,IAAIC,EAAMC,EAEV,GAAKvD,EAAOU,KAAOV,EAAOqB,cAAkBiC,EAAOhD,EAAON,IAEzD,OAAOC,EA5GS,EA4GoB,mBAKrC,KAASsD,EAAQD,EAAKC,MApCF,cAsCnB,OAAOtD,EAjHW,EAiHoB,qB,IAIvC2C,EAAOC,OAvFiB,EAwFxBD,EAAOI,YAAcO,EAAO,GAC5BX,EAAOE,QAAUQ,EAAO,KAIvBA,EAAOhD,EAAON,IACT,IAAUsD,GAGf,GAFAV,EAAOE,QAAUQ,EAAO,KAEnB,MAAQA,EAAKE,OAAQ,IAkC1B,IA3BKD,EAAQD,EAAKC,MAAOf,MAExBI,EAAOM,MAAQO,WAAYF,EAAO,MAI9BA,EAAQD,EAAKC,MAAOd,MAExBG,EAAOO,SAAWM,WAAYF,EAAO,MAIjCA,EAAQD,EAAKC,MAAOb,MAExBE,EAAOC,OArHU,EAsHjBD,EAAOK,OAASM,EAAO,KAInBA,EAAQD,EAAKC,MAAOZ,MAExBC,EAAOC,OA3Hc,EA4HrBD,EAAOS,OAASK,SAAUH,EAAO,GAAK,IACtCX,EAAOQ,MAAQM,SAAUH,EAAO,GAAK,KA9HpB,EAkIXX,EAAOC,OAjIQ,EAiIyBD,EAAOC,MAAkC,WAhCvFD,EAAOG,UAAYO,EAAO,KAoC5B,OAtImB,EAsIVV,EAAOC,MArIO,EA2IdD,EAAOC,MAMTD,EAJC3C,EA7KW,EA6KoB,gCAN/BA,EAvKW,EAuKoB,2BAYxC,CAqJwB0D,CAAiBtB,GAE1C,IA/UuB,IA+UME,EAAmB,CAE/C,MAAMqB,EAAIrB,EAAiBa,MAC1BS,EAAItB,EAAiBc,OACrBS,EAzJqB,SAAW9D,EAAQ4D,EAAGC,GAE3C,MAAME,EAAiBH,EAEvB,GAEKG,EAAiB,GAASA,EAAiB,OAE3C,IAAM/D,EAAQ,IAAW,IAAMA,EAAQ,IAAyB,IAAdA,EAAQ,GAI9D,OAAO,IAAIsC,WAAYtC,GAIxB,GAAK+D,KAAuB/D,EAAQ,IAAO,EAAMA,EAAQ,IAExD,OAAOC,EAvMW,EAuMoB,wBAIvC,MAAM+D,EAAY,IAAI1B,WAAY,EAAIsB,EAAIC,GAE1C,IAAOG,EAAU1C,OAEhB,OAAOrB,EA9MW,EA8MoB,mCAIvC,IAAIgE,EAAS,EAAGvD,EAAM,EAEtB,MAAMwD,EAAU,EAAIH,EACdI,EAAY,IAAI7B,WAAY,GAC5B8B,EAAkB,IAAI9B,WAAY4B,GACxC,IAAIG,EAAgBR,E,KAGVQ,EAAgB,GAAS3D,EAAMV,EAAOqB,YAAe,CAE9D,GAAKX,EAAM,EAAIV,EAAOqB,WAErB,OAAOpB,EAjOQ,GA0OhB,GALAkE,EAAW,GAAMnE,EAAQU,KACzByD,EAAW,GAAMnE,EAAQU,KACzByD,EAAW,GAAMnE,EAAQU,KACzByD,EAAW,GAAMnE,EAAQU,KAElB,GAAKyD,EAAW,IAAW,GAAKA,EAAW,KAAeA,EAAW,IAAO,EAAMA,EAAW,KAASJ,EAE5G,OAAO9D,EA1OU,EA0OqB,4BAMvC,IAAaqE,EAATC,EAAM,E,KAEAA,EAAML,GAAexD,EAAMV,EAAOqB,YAAe,CAE1DiD,EAAQtE,EAAQU,KAChB,MAAM8D,EAAeF,EAAQ,IAG7B,GAFKE,IAAeF,GAAS,KAEtB,IAAMA,GAAaC,EAAMD,EAAQJ,EAEvC,OAAOjE,EA1PS,EA0PsB,qBAIvC,GAAKuE,EAAe,CAGnB,MAAMC,EAAYzE,EAAQU,KAC1B,IAAM,IAAIC,EAAI,EAAGA,EAAI2D,EAAO3D,IAE3ByD,EAAiBG,KAAWE,CAK9B,MAGCL,EAAgBM,IAAK1E,EAAOmB,SAAUT,EAAKA,EAAM4D,GAASC,GAC1DA,GAAOD,EAAO5D,GAAO4D,CAIvB,CAKA,MAAMK,EAAIZ,EACV,IAAM,IAAIpD,EAAI,EAAGA,EAAIgE,EAAGhE,IAAO,CAE9B,IAAIiE,EAAM,EACVZ,EAAWC,GAAWG,EAAiBzD,EAAIiE,GAC3CA,GAAOb,EACPC,EAAWC,EAAS,GAAMG,EAAiBzD,EAAIiE,GAC/CA,GAAOb,EACPC,EAAWC,EAAS,GAAMG,EAAiBzD,EAAIiE,GAC/CA,GAAOb,EACPC,EAAWC,EAAS,GAAMG,EAAiBzD,EAAIiE,GAC/CX,GAAU,CAEX,CAEAI,GAED,CAEA,OAAOL,CAER,CAmCmBa,CAAqBxC,EAAUlB,SAAUkB,EAAU3B,KAAOkD,EAAGC,GAEhF,IArVsB,IAqVOC,EAAkB,CAE9C,IAAIgB,EAAMjF,EACNkF,EAEJ,OAASnF,KAAKC,MAEb,KAAKL,EAAAwF,UAEJD,EAAcjB,EAAgBxC,OAAS,EACvC,MAAM2D,EAAa,IAAIC,aAA4B,EAAdH,GAErC,IAAM,IAAII,EAAI,EAAGA,EAAIJ,EAAaI,IAEjC3D,EAAoBsC,EAAqB,EAAJqB,EAAOF,EAAgB,EAAJE,GAIzDL,EAAOG,EACPpF,EAAOL,EAAAwF,UACP,MAED,KAAKxF,EAAAM,cAEJiF,EAAcjB,EAAgBxC,OAAS,EACvC,MAAM8D,EAAY,IAAIlE,YAA2B,EAAd6D,GAEnC,IAAM,IAAIM,EAAI,EAAGA,EAAIN,EAAaM,IAEjCpD,EAAmB6B,EAAqB,EAAJuB,EAAOD,EAAe,EAAJC,GAIvDP,EAAOM,EACPvF,EAAOL,EAAAM,cACP,M,QAIAM,QAAQC,MAAO,uCAAwCT,KAAKC,MAK9D,MAAO,CACNuD,MAAOQ,EAAGP,OAAQQ,EAClBiB,KAAMA,EACNlC,OAAQL,EAAiBO,OACzBI,MAAOX,EAAiBW,MACxBC,SAAUZ,EAAiBY,SAC3BtD,KAAMA,EAGR,CAED,CAEA,OAAO,IAER,CAEAyF,YAAaC,GAGZ,OADA3F,KAAKC,KAAO0F,EACL3F,IAER,CAEA4F,KAAMC,EAAKC,EAAQC,EAAYC,GAuB9B,OAAOjG,MAAM6F,KAAMC,G,SArBMI,EAASC,GAEjC,OAASD,EAAQhG,MAEhB,KAAKL,EAAAwF,UACL,KAAKxF,EAAAM,cAEJ+F,EAAQE,SAAWvG,EAAAwG,eACnBH,EAAQI,UAAYzG,EAAA0G,aACpBL,EAAQM,UAAY3G,EAAA0G,aACpBL,EAAQO,iBAAkB,EAC1BP,EAAQQ,OAAQ,EAMbX,GAASA,EAAQG,EAASC,EAEhC,GAEwCH,EAAYC,EAErD,EC/cD,IAAIU,EAAQ,WAEX,IAAIC,EAAO,EAEPC,EAAYC,SAASC,cAAe,O,SAW/BC,EAAUC,GAGlB,OADAJ,EAAUK,YAAaD,EAAME,KACtBF,CAER,C,SAESG,EAAWC,GAEnB,IAAM,IAAIrG,EAAI,EAAGA,EAAI6F,EAAUS,SAAS3F,OAAQX,IAE/C6F,EAAUS,SAAUtG,GAAIuG,MAAMC,QAAUxG,IAAMqG,EAAK,QAAU,OAI9DT,EAAOS,CAER,CA3BAR,EAAUU,MAAME,QAAU,uEAC1BZ,EAAUa,iBAAkB,SAAS,SAAWC,GAE/CA,EAAMC,iBACNR,IAAcR,EAAOC,EAAUS,SAAS3F,OAEzC,IAAG,GAyBH,IAAIkG,GAAcC,aAAeC,MAAOC,MAAOC,EAAWJ,EAAWK,EAAS,EAE1EC,EAAWnB,EAAU,IAAIL,EAAMyB,MAAO,MAAO,OAAQ,SACrDC,EAAUrB,EAAU,IAAIL,EAAMyB,MAAO,KAAM,OAAQ,SAEvD,GAAKE,KAAKR,aAAeQ,KAAKR,YAAYS,OAEzC,IAAIC,EAAWxB,EAAU,IAAIL,EAAMyB,MAAO,KAAM,OAAQ,SAMzD,OAFAhB,EAAW,GAEJ,CAENqB,SAAU,GAEVtB,IAAKN,EAELG,SAAUA,EACVI,UAAWA,EAEXsB,MAAO,WAENb,GAAcC,aAAeC,MAAOC,KAErC,EAEAW,IAAK,WAEJT,IAEA,IAAIU,GAASd,aAAeC,MAAOC,MAInC,GAFAK,EAAQQ,OAAQD,EAAOf,EAAW,KAE7Be,GAAQX,EAAW,MAEvBE,EAASU,OAAmB,IAATX,GAAoBU,EAAOX,GAAY,KAE1DA,EAAWW,EACXV,EAAS,EAEJM,GAAW,CAEf,IAAID,EAAST,YAAYS,OACzBC,EAASK,OAAQN,EAAOO,eAAiB,QAASP,EAAOQ,gBAAkB,QAE5E,CAID,OAAOH,CAER,EAEAC,OAAQ,WAEPhB,EAAY5H,KAAK0I,KAElB,EAIAK,WAAYnC,EACZoC,QAAS7B,EAIX,EAEAT,EAAMyB,MAAQ,SAAWc,EAAMC,EAAIC,GAElC,IAAI3G,EAAM4G,IAAUC,EAAM,EAAGC,EAAQnH,KAAKmH,MACtCC,EAAKD,EAAOE,OAAOC,kBAAoB,GAEvCC,EAAQ,GAAKH,EAAII,EAAS,GAAKJ,EAClCK,EAAS,EAAIL,EAAIM,EAAS,EAAIN,EAC9BO,EAAU,EAAIP,EAAIQ,EAAU,GAAKR,EACjCS,EAAc,GAAKT,EAAIU,EAAe,GAAKV,EAExCW,EAASrD,SAASC,cAAe,UACrCoD,EAAO1G,MAAQkG,EACfQ,EAAOzG,OAASkG,EAChBO,EAAO5C,MAAME,QAAU,yBAEvB,IAAI2C,EAAUD,EAAOE,WAAY,MAejC,OAdAD,EAAQE,KAAO,QAAY,EAAId,EAAO,gCACtCY,EAAQG,aAAe,MAEvBH,EAAQI,UAAYpB,EACpBgB,EAAQK,SAAU,EAAG,EAAGd,EAAOC,GAE/BQ,EAAQI,UAAYrB,EACpBiB,EAAQM,SAAUxB,EAAMW,EAAQC,GAChCM,EAAQK,SAAUV,EAASC,EAASC,EAAaC,GAEjDE,EAAQI,UAAYpB,EACpBgB,EAAQO,YAAc,GACtBP,EAAQK,SAAUV,EAASC,EAASC,EAAaC,GAE1C,CAEN/C,IAAKgD,EAELtB,OAAQ,SAAWjD,EAAOgF,GAEzBnI,EAAML,KAAKK,IAAKA,EAAKmD,GACrB0D,EAAMlH,KAAKkH,IAAKA,EAAK1D,GAErBwE,EAAQI,UAAYpB,EACpBgB,EAAQO,YAAc,EACtBP,EAAQK,SAAU,EAAG,EAAGd,EAAOK,GAC/BI,EAAQI,UAAYrB,EACpBiB,EAAQM,SAAUnB,EAAO3D,GAAU,IAAMsD,EAAO,KAAOK,EAAO9G,GAAQ,IAAM8G,EAAOD,GAAQ,IAAKO,EAAQC,GAExGM,EAAQS,UAAWV,EAAQJ,EAAUP,EAAIQ,EAASC,EAAcT,EAAIU,EAAcH,EAASC,EAASC,EAAcT,EAAIU,GAEtHE,EAAQK,SAAUV,EAAUE,EAAcT,EAAIQ,EAASR,EAAIU,GAE3DE,EAAQI,UAAYpB,EACpBgB,EAAQO,YAAc,GACtBP,EAAQK,SAAUV,EAAUE,EAAcT,EAAIQ,EAASR,EAAID,GAAS,EAAM3D,EAAQgF,GAAeV,GAElG,EAIF,E,IAEAY,EAAenE,E,aCxJf,IAAIoE,EAAOC,EAAQC,EAAUC,EAAaC,EAAUC,EAASC,EAAKC,EAAOC,EAEzE,MAAMC,EAAS,CAEdC,MAAO,UACPC,QAAS,EACTC,IAAK,IACLC,mBAAoB,IACpBC,YAAY,EACZC,SAAS,G,wIASTf,EAAQ,IAAIlL,EAAAkM,MAEZf,EAAS,IAAInL,EAAAmM,kBAAyB,GAAIvC,OAAOwC,WAAaxC,OAAOyC,YAAa,GAAK,KACvFlB,EAAOmB,SAASpH,IAAK,GAAI,GAAI,GAK7BkG,EAAW,IAAIpL,EAAAuM,cAAqB,CAAEC,WAAW,IACjDpB,EAASqB,QAAS7C,OAAOwC,WAAYxC,OAAOyC,aAC5CjB,EAASsB,eAAiB1M,EAAA2M,aAC1BvB,EAASwB,YAAc5M,EAAA6M,sBACvB5F,SAAS6F,KAAKzF,YAAa+D,EAASjC,YAEpCmC,EAAW,IAAIyB,EAAAC,cAAe7B,EAAQC,EAASjC,YAE/CuC,EAAQ,IAAI1L,EAAAiN,MAGZ,MAAMC,GAAqB,IAAInN,GAC7BoN,UAAW,gHAEPC,GAAc,IAAIC,EAAAC,YAAaH,UAAW,yBAEhD,IAAII,GACFlC,EAAakC,SAAeC,QAAQC,IAAK,CAAEP,EAAoBE,IAGjE/B,EAAYqC,QAAU1N,EAAA2N,iCACtBtC,EAAYzE,iBAAkB,EAC9ByE,EAAY5E,UAAYzG,EAAA4N,yBACxBvC,EAAY1E,UAAY3G,EAAA0G,aACxBwE,EAAM2C,WAAaxC,EAGnB,MAAMyC,EAAkB,IAAI9N,EAAA+N,eAAsB,CACjDC,SAAU,CAGTC,OAAQ,CAAElI,MAAOsF,GACjB6C,IAAK,CAAEnI,MAAO,IAAIoI,EAAAC,sBAClBC,oBAAqB,CAAEtI,MAAOoF,EAAOmD,yBACrCC,cAAe,CAAExI,MAAOoF,EAAOqD,aAC/BC,WAAY,CAAE1I,MAAO,IAAI/F,EAAA0O,SAGzB7C,QAAS,CAAE9F,MAAO,GAClB+F,IAAK,CAAE/F,MAAO,KAGd6F,MAAO,CAAE7F,MAAO,IAAI/F,EAAA2O,MAAa,EAAG,EAAG,IACvC3C,WAAY,CAAEjG,OAAO,GACrBgG,mBAAoB,CAAEhG,MAAO,MAG9B6I,aAAsB,kYAsKvBC,eAAM,8IAUNV,EAAAW,wB,EAECC,q9J,k/BA9OFC","sources":["node_modules/three/examples/jsm/loaders/RGBELoader.js","node_modules/three/examples/jsm/libs/stats.module.js","example/diamond.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\ttype = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\ttype = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n","import * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport {\n\tMeshBVH,\n\tMeshBVHUniformStruct,\n\tshaderStructs,\n\tshaderIntersectFunction,\n\tSAH\n} from '../src/index.js';\n\nlet scene, camera, renderer, environment, controls, diamond, gui, stats, clock;\n\nconst params = {\n\n\tcolor: '#ffffff',\n\tbounces: 3.0,\n\tior: 2.4,\n\taberrationStrength: 0.01,\n\tfastChroma: false,\n\tanimate: true,\n\n};\n\ninit();\n\nasync function init() {\n\n\t// renderer, scene, camera setup\n\tscene = new THREE.Scene();\n\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\tcamera.position.set( 28, 15, 7 );\n\n\t// NOTE: antialiasing is disabled because the interpolation at face edges results in numeric issues\n\t// causing the raycast to intersect the front faces. An adjusted bvh cast function that affords filtering by\n\t// front / back faces would help this.\n\trenderer = new THREE.WebGLRenderer( { antialias: false } );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\tclock = new THREE.Clock();\n\n\t// load the environment and model\n\tconst environmentPromise = new RGBELoader()\n\t\t.loadAsync( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/venice_sunset_1k.hdr' );\n\n\tconst gltfPromise = new GLTFLoader().loadAsync( '../models/diamond.glb' );\n\n\tlet gltf;\n\t[ environment, gltf ] = await Promise.all( [ environmentPromise, gltfPromise ] );\n\n\t// initialize the background\n\tenvironment.mapping = THREE.EquirectangularReflectionMapping;\n\tenvironment.generateMipmaps = true;\n\tenvironment.minFilter = THREE.LinearMipmapLinearFilter;\n\tenvironment.magFilter = THREE.LinearFilter;\n\tscene.background = environment;\n\n\t// initialize the diamond material\n\tconst diamondMaterial = new THREE.ShaderMaterial( {\n\t\tuniforms: {\n\n\t\t\t// scene / geometry information\n\t\t\tenvMap: { value: environment },\n\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\tprojectionMatrixInv: { value: camera.projectionMatrixInverse },\n\t\t\tviewMatrixInv: { value: camera.matrixWorld },\n\t\t\tresolution: { value: new THREE.Vector2() },\n\n\t\t\t// internal reflection settings\n\t\t\tbounces: { value: 3 },\n\t\t\tior: { value: 2.4 },\n\n\t\t\t// chroma and color settings\n\t\t\tcolor: { value: new THREE.Color( 1, 1, 1 ) },\n\t\t\tfastChroma: { value: false },\n\t\t\taberrationStrength: { value: 0.01 },\n\n\t\t},\n\t\tvertexShader: /*glsl*/ `\n\t\t\tvarying vec3 vWorldPosition;\n\t\t\tvarying vec3 vNormal;\n\t\t\tuniform mat4 viewMatrixInv;\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldPosition = ( modelMatrix * vec4( position, 1.0 ) ).xyz;\n\t\t\t\tvNormal = ( viewMatrixInv * vec4( normalMatrix * normal, 0.0 ) ).xyz;\n\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4( position , 1.0 );\n\n\t\t\t}\n\t\t`,\n\t\tfragmentShader: /*glsl*/ `\n\t\t\t#define RAY_OFFSET 0.001\n\n\t\t\t#include <common>\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\n\t\t\t${ shaderStructs }\n\t\t\t${ shaderIntersectFunction }\n\n\t\t\tvarying vec3 vWorldPosition;\n\t\t\tvarying vec3 vNormal;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform float bounces;\n\t\t\tuniform BVH bvh;\n\t\t\tuniform float ior;\n\t\t\tuniform vec3 color;\n\t\t\tuniform bool fastChroma;\n\t\t\tuniform mat4 projectionMatrixInv;\n\t\t\tuniform mat4 viewMatrixInv;\n\t\t\tuniform mat4 modelMatrix;\n\t\t\tuniform vec2 resolution;\n\t\t\tuniform float aberrationStrength;\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\t// performs an iterative bounce lookup modeling internal reflection and returns\n\t\t\t// a final ray direction.\n\t\t\tvec3 totalInternalReflection( vec3 incomingOrigin, vec3 incomingDirection, vec3 normal, float ior, mat4 modelMatrixInverse ) {\n\n\t\t\t\tvec3 rayOrigin = incomingOrigin;\n\t\t\t\tvec3 rayDirection = incomingDirection;\n\n\t\t\t\t// refract the ray direction on the way into the diamond and adjust offset from\n\t\t\t\t// the diamond surface for raytracing\n\t\t\t\trayDirection = refract( rayDirection, normal, 1.0 / ior );\n\t\t\t\trayOrigin = vWorldPosition + rayDirection * RAY_OFFSET;\n\n\t\t\t\t// transform the ray into the local coordinates of the model\n\t\t\t\trayOrigin = ( modelMatrixInverse * vec4( rayOrigin, 1.0 ) ).xyz;\n\t\t\t\trayDirection = normalize( ( modelMatrixInverse * vec4( rayDirection, 0.0 ) ).xyz );\n\n\t\t\t\t// perform multiple ray casts\n\t\t\t\tfor( float i = 0.0; i < bounces; i ++ ) {\n\n\t\t\t\t\t// results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\t// perform the raycast\n\t\t\t\t\t// the diamond is a water tight model so we assume we always hit a surface\n\t\t\t\t\tbvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\n\t\t\t\t\t// derive the new ray origin from the hit results\n\t\t\t\t\tvec3 hitPos = rayOrigin + rayDirection * dist;\n\n\t\t\t\t\t// if we don't internally reflect then end the ray tracing and sample\n\t\t\t\t\tvec3 refractedDirection = refract( rayDirection, faceNormal, ior );\n\t\t\t\t\tbool totalInternalReflection = length( refract( rayDirection, faceNormal, ior ) ) == 0.0;\n\t\t\t\t\tif ( ! totalInternalReflection ) {\n\n\t\t\t\t\t\trayDirection = refractedDirection;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// otherwise reflect off the surface internally for another hit\n\t\t\t\t\trayDirection = reflect( rayDirection, faceNormal );\n\t\t\t\t\trayOrigin = hitPos + rayDirection * RAY_OFFSET;\n\n\t\t\t\t}\n\n\t\t\t\t// return the final ray direction in world space\n\t\t\t\treturn normalize( ( modelMatrix * vec4( rayDirection, 0.0 ) ).xyz );\n\t\t\t}\n\n\t\t\tvec4 envSample( sampler2D envMap, vec3 rayDirection ) {\n\n\t\t\t\tvec2 uvv = equirectUv( rayDirection );\n\t\t\t\treturn texture( envMap, uvv );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tmat4 modelMatrixInverse = inverse( modelMatrix );\n\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution;\n\n\t\t\t\tvec3 normal = vNormal;\n\t\t\t\tvec3 rayOrigin = cameraPosition;\n\t\t\t\tvec3 rayDirection = normalize( vWorldPosition - cameraPosition );\n\n\t\t\t\tif ( aberrationStrength != 0.0 ) {\n\n\t\t\t\t\t// perform chromatic aberration lookups\n\t\t\t\t\tvec3 rayDirectionG = totalInternalReflection( rayOrigin, rayDirection, normal, max( ior, 1.0 ), modelMatrixInverse );\n\t\t\t\t\tvec3 rayDirectionR, rayDirectionB;\n\n\t\t\t\t\tif ( fastChroma ) {\n\n\t\t\t\t\t\t// fast chroma does a quick uv offset on lookup\n\t\t\t\t\t\trayDirectionR = normalize( rayDirectionG + 1.0 * vec3( aberrationStrength / 2.0 ) );\n\t\t\t\t\t\trayDirectionB = normalize( rayDirectionG - 1.0 * vec3( aberrationStrength / 2.0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// compared to a proper ray trace of diffracted rays\n\t\t\t\t\t\tfloat iorR = max( ior * ( 1.0 - aberrationStrength ), 1.0 );\n\t\t\t\t\t\tfloat iorB = max( ior * ( 1.0 + aberrationStrength ), 1.0 );\n\t\t\t\t\t\trayDirectionR = totalInternalReflection(\n\t\t\t\t\t\t\trayOrigin, rayDirection, normal,\n\t\t\t\t\t\t\tiorR, modelMatrixInverse\n\t\t\t\t\t\t);\n\t\t\t\t\t\trayDirectionB = totalInternalReflection(\n\t\t\t\t\t\t\trayOrigin, rayDirection, normal,\n\t\t\t\t\t\t\tiorB, modelMatrixInverse\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// get the color lookup\n\t\t\t\t\tfloat r = envSample( envMap, rayDirectionR ).r;\n\t\t\t\t\tfloat g = envSample( envMap, rayDirectionG ).g;\n\t\t\t\t\tfloat b = envSample( envMap, rayDirectionB ).b;\n\t\t\t\t\tgl_FragColor.rgb = vec3( r, g, b ) * color;\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// no chromatic aberration lookups\n\t\t\t\t\trayDirection = totalInternalReflection( rayOrigin, rayDirection, normal, max( ior, 1.0 ), modelMatrixInverse );\n\t\t\t\t\tgl_FragColor.rgb = envSample( envMap, rayDirection ).rgb * color;\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t#include <encodings_fragment>\n\n\t\t\t}\n\t\t`\n\t} );\n\n\t// initialize the diamond geometry and material uniforms\n\tconst diamondGeo = gltf.scene.children[ 0 ].children[ 0 ].children[ 0 ].children[ 0 ].children[ 0 ].geometry;\n\tdiamondGeo.scale( 10, 10, 10 );\n\n\tconst bvh = new MeshBVH( diamondGeo, { strategy: SAH, maxLeafTris: 1 } );\n\tdiamondMaterial.uniforms.bvh.value.updateFrom( bvh );\n\tdiamond = new THREE.Mesh( diamondGeo, diamondMaterial );\n\tscene.add( diamond );\n\n\t// gui setup\n\tgui = new GUI();\n\tgui.add( params, 'animate' );\n\tgui.addColor( params, 'color' ).name( 'Color' ).onChange( v => {\n\n\t\tdiamond.material.uniforms.color.value.set( v );\n\n\t} );\n\tgui.add( params, 'bounces', 1.0, 10.0, 1.0 ).name( 'Bounces' ).onChange( v => {\n\n\t\tdiamond.material.uniforms.bounces.value = v;\n\n\t} );\n\tgui.add( params, 'ior', 1.0, 5.0, 0.01 ).name( 'IOR' ).onChange( v => {\n\n\t\tdiamond.material.uniforms.ior.value = v;\n\n\t} );\n\tgui.add( params, 'fastChroma' ).onChange( v => {\n\n\t\tdiamond.material.uniforms.fastChroma.value = v;\n\n\t} );\n\tgui.add( params, 'aberrationStrength', 0.0, 0.1, 0.0001 ).onChange( v => {\n\n\t\tdiamond.material.uniforms.aberrationStrength.value = v;\n\n\t} );\n\n\tstats = new Stats();\n\tstats.showPanel( 0 );\n\tdocument.body.appendChild( stats.dom );\n\trender();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\t\tdiamond.material.uniforms.resolution.value.set( window.innerWidth, window.innerHeight );\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\nfunction render() {\n\n\tif ( params.animate ) {\n\n\t\tdiamond.rotation.y += clock.getDelta() * 0.25;\n\n\t}\n\n\tstats.update();\n\tcontrols.update();\n\trenderer.render( scene, camera );\n\trequestAnimationFrame( render );\n\n}\n"],"names":["$5ee05658f4b0e3bf$export$d076a711b55c758a","$ilwiq","DataTextureLoader","manager","super","this","type","HalfFloatType","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","DataUtils","toHalfFloat","min","byteArray","Uint8Array","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","count","ptr","isEncodedRun","byteValue","set","l","off","RGBE_ReadPixels_RLE","data","numElements","FloatType","floatArray","Float32Array","j","halfArray","j1","setDataType","value","load","url","onLoad","onProgress","onError","texture","texData","encoding","LinearEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","$5aae44c9b1864d53$var$Stats","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","children","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","Infinity","max","round","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","maxValue","drawImage","$5aae44c9b1864d53$export$2e2bcd8739ae039","$e7bc8b365f81c957$var$scene","$e7bc8b365f81c957$var$camera","$e7bc8b365f81c957$var$renderer","$e7bc8b365f81c957$var$environment","$e7bc8b365f81c957$var$controls","$e7bc8b365f81c957$var$diamond","$e7bc8b365f81c957$var$gui","$e7bc8b365f81c957$var$stats","$e7bc8b365f81c957$var$clock","$e7bc8b365f81c957$var$params","color","bounces","ior","aberrationStrength","fastChroma","animate","Scene","PerspectiveCamera","innerWidth","innerHeight","position","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","toneMapping","ACESFilmicToneMapping","body","$5Rd1x","OrbitControls","Clock","environmentPromise","loadAsync","gltfPromise","$7lx9d","GLTFLoader","gltf","Promise","all","mapping","EquirectangularReflectionMapping","LinearMipmapLinearFilter","background","diamondMaterial","ShaderMaterial","uniforms","envMap","bvh","$4CEV9","MeshBVHUniformStruct","projectionMatrixInv","projectionMatrixInverse","viewMatrixInv","matrixWorld","resolution","Vector2","Color","vertexShader","fragmentShader","shaderStructs","shaderIntersectFunction","$e7bc8b365f81c957$var$init"],"version":3,"file":"diamond.7afaf405.js.map"}